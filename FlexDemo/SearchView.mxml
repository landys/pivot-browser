<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:hisa="*"
	width="100%" height="100%"
	creationComplete="initApp()">
	<mx:Script>
		<![CDATA[
			import hisa.vo.PhotoVo;
			import hisa.event.ClusterClickEvent;
			import mx.events.ItemClickEvent;
			import mx.rpc.events.ResultEvent;
			import mx.collections.ArrayCollection;
			import mx.events.DragEvent;
			import mx.events.EffectEvent;
			import mx.managers.DragManager;
			import mx.core.*;
			import mx.controls.*;
			import mx.effects.*;
			import mx.rpc.events.FaultEvent;
			import mx.events.CloseEvent;

			
			[Embed(source="assets/icon_left.png")]
			private const ICON_LEFT:Class;
			
			[Embed(source="assets/icon_right.png")]		
			private const ICON_RIGHT:Class;
			
			[Embed(source="assets/icon_left_disabled.png")]
			private const ICON_LEFT_DISABLED:Class;
			
			[Embed(source="assets/icon_right_disabled.png")]
			private const ICON_RIGHT_DISABLED:Class;
			
			[Embed(source="assets/undo.png")]
			private const ICON_UNDO:Class;
			
			[Embed(source="assets/redo.png")]		
			private const ICON_REDO:Class;
			
			// the tags in current seach collection
			private var tagsSearched:ArrayCollection = new ArrayCollection();
			
			// size of each cluster
			private const CLUSTER_SIZE:Object = {w:250, h:110};
			
			// positioin of first cluseter
			private const FIRST_CLUSTER:Point = new Point(26, 80);
			
			// gap between clusters
			private const CLUSTER_XGAP:int = 262;
			
			// index of the center cluster
			private const CENTER_CLUSTER_INDEX:int = 200;
		
			// index of the left cluster showing all tags.
			private const WHOLE_CLUSTER_INDEX:int = CENTER_CLUSTER_INDEX + 1;
			
			// get at most number of clusters for initial search.
			private const TAGS_PER_CLUSTERS:int = 2;
			
			// shape of all clusters
			private const VISIBLE_CLUSTERS_SHAPE:ArrayCollection = new ArrayCollection(
				[{x:FIRST_CLUSTER.x, y:FIRST_CLUSTER.y, w:CLUSTER_SIZE.w, h:CLUSTER_SIZE.h},
				{x:FIRST_CLUSTER.x+CLUSTER_XGAP, y:FIRST_CLUSTER.y, w:CLUSTER_SIZE.w, h:CLUSTER_SIZE.h},
				{x:FIRST_CLUSTER.x+CLUSTER_XGAP*2, y:FIRST_CLUSTER.y, w:CLUSTER_SIZE.w, h:CLUSTER_SIZE.h},
				{x:FIRST_CLUSTER.x+CLUSTER_XGAP*3, y:FIRST_CLUSTER.y, w:CLUSTER_SIZE.w, h:CLUSTER_SIZE.h}]);
			
			// shape of all HRules
			private const HRS_SHAPE:ArrayCollection = new ArrayCollection(
				[{x:VISIBLE_CLUSTERS_SHAPE[0].x+CLUSTER_SIZE.w/2, y:VISIBLE_CLUSTERS_SHAPE[0].y+5, w:200, h:2, r:-10},
				{x:VISIBLE_CLUSTERS_SHAPE[1].x+CLUSTER_SIZE.w/2, y:VISIBLE_CLUSTERS_SHAPE[1].y+5, w:100, h:2, r:-30},
				{x:VISIBLE_CLUSTERS_SHAPE[2].x+CLUSTER_SIZE.w/2, y:VISIBLE_CLUSTERS_SHAPE[2].y+5, w:100, h:2, r:-150},
				{x:VISIBLE_CLUSTERS_SHAPE[3].x+CLUSTER_SIZE.w/2, y:VISIBLE_CLUSTERS_SHAPE[3].y+5, w:200, h:2, r:-170}]);
				
			// the size of beginning center cluster	
			private var sClCenter:Object = {x:326, y:18, w:420, h:166}; 
			
			// the size of center cluster
			//private var sClC:Object = {x:258, y:74, w:140, h:70}; 
			private var sClC:Object = {x:sClCenter.x, y:5, w:sClCenter.w, h:53}; 
			
			// place of center of clusters, one endpoint of the Hrs.
			private var pCenter:Object = {x:sClC.x+sClC.w/2, y:sClC.y+sClC.h/2};
			
			// begin, only one cluster
			private var isOnly:Boolean;
			
			// all clusters in total
			[Bindable]
			private var clusters:ArrayCollection = new ArrayCollection();
			
			// the current move position of clusters.
			private var curPosition:int = 0;
			
			// effects
			private var parShowAll:Parallel;
			
			// horizontal move left effect
			private var movLeft:Move;
			
			// horizontal move right effect
			private var movRight:Move;
			
			// most number of clusters on the screen
			private var ncMost:int = 4;
			
			// all visible clusters related to center tag
			// it must be assigned every change
			private var ncReal:int;
			
			// page of pictures
			private var picPage:int;
			
			// the cluster for search pictures, begin from 0, -1 means no cluster specified.
			private var selectedClusterIndex:int = -1;
			
			// the pic selected for sort by color or wavelet
			private var selectedPic:String;
			
			// used only in delection
			private var tempTag:String;
			
			[Bindable]
			private var topKInSelectTag:int = 100;
			
			[Bindable]
			private var maxClusterNum:int = 20;
			
			[Bindable]
			private var isExpansion:Boolean = false;
			
			[Bindable]
			private var isCluster:Boolean = true; 
			
			[Bindable]
			private var isExpansionWithCoMap:Boolean = true;
			
			[Bindable]
			private var minFreqTime:int = 20;
			
			[Bindable]
			private var topKForExpension:int = 5;
			
			[Bindable]
			private var picNum:int = 0;
			
			// the count of processing remote call, for enable or disable the application
			private var remoteCallCount:int = 0;
			
			// the number of pictures displayed in the screen.
			private var maxPicsPerDisplay:int = 40;
			
			private function initApp():void
			{
				//Security.loadPolicyFile("http://192.168.80.158:8080/PivotBrowser/crossdomain.xml");
				
				//trace("SearchView.initApp() begin.");
				searchRO.getPicUrlForTagsRank.addEventListener("result", getPicUrlForTagsRankHandler);
				searchRO.getPicUrlForTagsRank.addEventListener("fault", faultHandler);
				searchRO.getPicUrlForColorRank.addEventListener("result", getPicUrlForColorRankHandler);
				searchRO.getPicUrlForColorRank.addEventListener("fault", faultHandler);
				searchRO.getPicUrlForWaveLetRank.addEventListener("result", getPicUrlForWaveLetRankHandler);
				searchRO.getPicUrlForWaveLetRank.addEventListener("fault", faultHandler);
				searchRO.getPicUrlForTagsRandom.addEventListener("result", getPicUrlForTagsRandomHandler);
				searchRO.getPicUrlForTagsRandom.addEventListener("fault", faultHandler);
				searchRO.getTagCloud.addEventListener("result", getTagCloudHandler);
				searchRO.getTagCloud.addEventListener("fault", faultHandler);
				searchRO.searchTag.addEventListener("result", searchTagHandler);
				searchRO.searchTag.addEventListener("fault", faultHandler);
				searchRO.getPivotNumPic.addEventListener("result", getPivotNumPicHandler);
				searchRO.getPivotNumPic.addEventListener("fault", faultHandler);
				
				// create effects
				parShowAll = new Parallel();
				
				var i:int = 0;
				// create show all effects for clusters and rules
				for (i=0; i<ncMost; i++)
				{
					var par:Parallel = new Parallel();
					// cluster effect
					var res:Resize = new Resize();
					var mov:Move = new Move();
					
					res.widthFrom = 1;
					res.widthTo = VISIBLE_CLUSTERS_SHAPE[i].w;
					res.heightFrom = 1;
					res.heightTo = VISIBLE_CLUSTERS_SHAPE[i].h;
					mov.xFrom = pCenter.x;
					mov.xTo = VISIBLE_CLUSTERS_SHAPE[i].x;
					mov.yFrom = pCenter.y;
					mov.yTo = VISIBLE_CLUSTERS_SHAPE[i].y;
					
					par.addChild(res);
					par.addChild(mov);
					
					// hrule effect
					res = new Resize(hrs[i]);
					mov = new Move(hrs[i]);
					
					res.widthFrom = 1;
					res.widthTo = HRS_SHAPE[i].w;
					res.heightFrom = 1;
					res.heightTo = HRS_SHAPE[i].h;
					mov.xFrom = pCenter.x;
					mov.xTo = HRS_SHAPE[i].x;
					mov.yFrom = pCenter.y;
					mov.yTo = HRS_SHAPE[i].y;
					
					par.addChild(res);
					par.addChild(mov);
					
					// add to all effect
					parShowAll.addChild(par);
				}
				parShowAll.addEventListener(EffectEvent.EFFECT_START, setClustersVisible);
				
				// horizontal move left effect 
				movLeft = new Move();
				movLeft.xBy = -CLUSTER_XGAP;
				movLeft.duration = 300;
				
				// horizontal move right effect
				movRight = new Move();
				movRight.xBy = CLUSTER_XGAP;
				movRight.duration = 300;
				
				movLeft.addEventListener(EffectEvent.EFFECT_END, onMoveLeftDone);
				movRight.addEventListener(EffectEvent.EFFECT_END, onMoveRightDone);
				
				gameStart();
			}
			
			// intialize into beginning to search.
			private function gameStart():void
			{
				setAllClustersNotVisible();
				// init cluster center				
				clusCenter.x = sClCenter.x;
				clusCenter.y = sClCenter.y;
				clusCenter.width = sClCenter.w;
				clusCenter.height = sClCenter.h;
				
				isOnly = true;
				ncReal = 0;
				picPage = 0;
				selectedPic = "";
				tagsSearched.removeAll();
				curPosition = 0;
				setAllRadio(false);
				navPrevClus.visible = false;
				navNextClus.visible = false;
				//clusCenter.setStyleName("clusterCanvas");
				clusters.removeAll();
				clsWhole.setStyleName("clusterCanvasWhole");
				selectedClusterIndex = -1;
				
				// clear left(whole) cluster
				clsWhole.clearCluster();
				
				// reset effects
				var i:int = 0;
				for (i=0; i<parShowAll.children.length; i++)
				{
					parShowAll.children[i].target = null;
				}
				
				searchRO.getTagCloud(20);
				disableApplication();
			}
			
			private function disableApplication():void
			{
				++remoteCallCount;
				Application.application.enabled = false;
			}
			
			private function enableApplication():void
			{
				if (--remoteCallCount <= 0)
				{
					Application.application.enabled = true;
				}
			}
			
			private function setAllClustersNotVisible():void
			{
				var i:int = 0;
				for (i=0; i<clusters.length; i++)
				{
					cls[i].visible = false;
				}
				for (i=0; i<hrs.length; i++)
				{
					hrs[i].visible = false;
				}
			}
			
			private function setClustersVisible(event:EffectEvent):void
			{
				for (var i:int=0; i<ncReal; i++)
				{
					cls[i].visible = true;
					hrs[i].visible = true;
				}
			}
			
			private function onMoveLeftDone(event:EffectEvent):void
			{
				if (curPosition - 1 >= 0)
				{
					cls[curPosition - 1].visible = false;
				}
			}
			
			private function onMoveRightDone(event:EffectEvent):void
			{
				if (curPosition + ncMost < clusters.length)
				{
					cls[curPosition + ncMost].visible = false;
				}
			}
			
			private function setAllRadio(flag:Boolean):void
			{
				rbtnColor.enabled = flag;
				rbtnColor.selected = flag;
				rbtnWavelet.enabled = flag;
				rbtnWavelet.selected = flag;	
				rbtnRandom.enabled = flag;
				rbtnRandom.selected = flag;
			}
			
			private function alertClickHandler(event:CloseEvent):void {
                if (event.detail == Alert.YES)
                {
                    tagsSearched.removeItemAt(tagsSearched.getItemIndex(tempTag));
					if (tagsSearched.length == 0)
					{
						gameStart();
					}
					else
					{
						doFetchClusters();
					}
                }
            }    
            

			// update the searched tag collection, and then do fetch clusters.
			private function fetchClusters(tags:Array, index:int):void
			{	
				for (var i:int=0; i<tags.length; i++)
				{
					if (!tagsSearched.contains(tags[i]))
					{
						tagsSearched.addItem(tags[i]);
					}
				}	
				
				doFetchClusters();

			}
			
			private function doFetchClusters():void
			{
				setAllClustersNotVisible();
				
				setAllRadio(false);
				
				// make center tag visible
				//clusCenter.visible = false;
				if (isOnly)
				{
					// relayout the center cluster first.
					clusCenter.width = sClC.w;
					clusCenter.height = sClC.h;
					clusCenter.x = sClC.x;
					clusCenter.y = sClC.y;
					clusCenter.styleName = "clusterCanvasCircle";
					clusCenter.tags = tagsSearched;
				}
				
				if (tagsSearched.length > 0)
				{
					topKInSelectTag = (int)(txtTopKInSelectTag.text);
					if (topKInSelectTag == 0)
					{
						topKInSelectTag = 100;
					}
					maxClusterNum = (int)(txtMaxClusterNum.text);
					if (maxClusterNum == 0)
					{
						maxClusterNum = 20;
					}
					navPrevClus.visible = false;
					navNextClus.visible = false;
					setAllClustersNotVisible();
					searchRO.searchTag(tagsSearched, topKInSelectTag, maxClusterNum, isExpansion, isExpansionWithCoMap, isCluster, minFreqTime, topKForExpension);
					disableApplication();
				}
			}
         
            //Function called by the canvas dragEnter event; enables dropping
			private function doDragEnter(event:DragEvent):void 
			{
				trace("SearchView.doDragEnter(event:DragEvent) begin");
				if (event.dragSource.hasFormat("img"))
	            {
	                DragManager.acceptDragDrop(IUIComponent(event.target));
	            }
			}

			private function doDragDrop(event:DragEvent):void 
			{
				//trace("SearchView.doDragDrop(event:DragEvent) begin");
				if (imgSelected.blendMode != BlendMode.NORMAL)
				{
					imgSelected.blendMode = BlendMode.NORMAL;
				}
				var img:Image = event.dragSource.dataForFormat("img") as Image;
				selectedPic = event.dragSource.dataForFormat("imgUrl") as String;
				imgSelected.source = img.source;
				//imgSelected.toolTip = selectedPic;
				rbtnColor.enabled = true;
				rbtnWavelet.enabled = true;
				rbtnRandom.enabled = true;
				rbtnColor.selected = true;
				
				//picPage = 0;
				//searchRO.getPicUrlForColorRank(null, picPage, selectedPic);
				//disableApplication();
			}
			
			private function doResize(resize:Parallel):void
			{
				////trace("SearchView.doResize(resize:Parallel) begin");
				resize.end();
				resize.play();
			}
			
			private function fetchPicsByCluster(index:int=-1):void
			{
				if (index >=0)
				{
					// get pictures
					picPage = 0;
					searchRO.getPicUrlForTagsRandom(getTagNames(clusters[index].tagList), tagsSearched, picPage);		
					disableApplication();
					rbtnColor.enabled = false;
					rbtnWavelet.enabled = false;
					rbtnColor.selected = false;
					rbtnWavelet.selected = false;
					rbtnRandom.enabled = false;
					rbtnRandom.selected = false;
					
					if (selectedClusterIndex != index)
					{
						if (selectedClusterIndex >= 0)
						{
							cls[selectedClusterIndex].setStyleName("clusterCanvas");
						}
						selectedClusterIndex = index;
						cls[selectedClusterIndex].setStyleName("clusterCanvasPicked");
						clsWhole.tags = cls[selectedClusterIndex].tags;
						clsWhole.pics = cls[selectedClusterIndex].pics;
					}
				}
			}
			
			private function faultHandler(event:FaultEvent):void
			{
				Alert.show("fault: "+event.message);			
				enableApplication();
				//trace("fault: "+event.message);
			}
			
			private function getPicUrlForTagsRankHandler(event:ResultEvent):void
			{
				//trace("SearchView.getPicUrlForTagsHandler(event:ResultEvent) begin");
				var a:ArrayCollection = ArrayCollection(event.result);
				//inputTag.text = a[0];
				
				var photos:ArrayCollection = new ArrayCollection();
				var i:int;
				if (tagsSearched != null && tagsSearched.length > 0)
				{
					var toolTip:String = "Tags: ";
					toolTip += tagsSearched[0];
					for (i=1; i<tagsSearched.length && i<3; i++)
					{
						toolTip += ", " + tagsSearched[i];
					}
					if (tagsSearched.length > 3)
					{
						toolTip += ", ...";
					}
				}
				
				for (i=0; i<a.length && i<maxPicsPerDisplay; i++)
				{	
					photos.addItem(new PhotoVo(String(a.getItemAt(i)), toolTip));
				}
				
				imgView.photos = photos;
				
				enableApplication();
				
				//trace("SearchView.getPicUrlForTagsHandler(event:ResultEvent) ends");
			}
			
			private function getPicUrlForColorRankHandler(event:ResultEvent):void
			{
				//trace("SearchView.getPicUrlForColorRankHandler(event:ResultEvent) begin");
				getPicUrlForTagsRankHandler(event);
			}
			
			private function getPicUrlForWaveLetRankHandler(event:ResultEvent):void
			{
				//trace("SearchView.getPicUrlForWaveLetRankHandler(event:ResultEvent) begin");
				getPicUrlForTagsRankHandler(event);
			}
			
			private function getPicUrlForTagsRandomHandler(event:ResultEvent):void
			{
				//trace("SearchView.getPicUrlForTagsRandomHandler(event:ResultEvent) begin");
				getPicUrlForTagsRankHandler(event);		
			}
			
			private function getTagCloudHandler(event:ResultEvent):void
			{
				//trace("SearchView.getTagCloudHandler(event:ResultEvent) begin");
				var tagsCenter:ArrayCollection = new ArrayCollection();
				var a:ArrayCollection = ArrayCollection(event.result);
				for (var i:int=0; i<a.length; i++)
				{
					tagsCenter.addItem({label: a[i].tagName});
				}
				clusCenter.tags = tagsCenter;
				dissolveIn.end();
				dissolveIn.play();
				
				enableApplication();
				//trace("SearchView.getTagCloudHandler(event:ResultEvent) end");
			}
			
			private function searchTagHandler(event:ResultEvent):void
			{
				searchRO.getPivotNumPic();
				
				clusters = ArrayCollection(event.result);
				curPosition = 0;
				
				// assign tags data to all clusters, including some global variable lick ncReal, etc.
				assignAllClusters();	
				
				movLeft.targets = cls;
				movRight.targets = cls;
				
				searchRO.getPicUrlForTagsRandom(getAllTagNames(), tagsSearched, picPage);
				disableApplication();

				// layout tags in center cluster
				var temp:ArrayCollection = new ArrayCollection();
				for (var i:int=0; i<tagsSearched.length; i++)
				{
					temp.addItem({label: tagsSearched[i]});
				}
				clusCenter.tags = temp;
				//clusCenter.visible = true;
				
				// center cluster effect
				dissolveIn.end();
				dissolveIn.play();
				
				// clusters initial effects
				layoutIntialClustersAfterFetch();
				
				// make not isOnly
				isOnly = false;
				
				navPrevClus.visible = false;
				if (clusters.length > ncMost)
				{
					navNextClus.visible = true;	
				}
				else
				{
					navNextClus.visible = false;
				}
								
				enableApplication();
			}
			
			// the initalize effect after fetch clusters.
			private function layoutIntialClustersAfterFetch():void
			{
				for (var i:int=0; i<ncReal; ++i)
				{
					parShowAll.children[i].target = cls[i];
				}
				parShowAll.end();
				parShowAll.play();
			}
			
			private function assignCluster(index:int):void
			{		
				var dataIndex:int = index;
				
				var tempb:ArrayCollection = new ArrayCollection();
				var tempc:ArrayCollection = new ArrayCollection();
				var b:ArrayCollection = ArrayCollection(clusters[dataIndex].tagList);
				var c:ArrayCollection = ArrayCollection(clusters[dataIndex].picUrlList);
				var j:int = 0;
				if (b != null) 
				{
					for (j=0; j<b.length; j++)
					{
						tempb.addItem({label: b[j].tagName});
					}
				}
				if (c != null)
				{
					for (j=0; j<c.length; j++)
					{
						tempc.addItem(c[j]);
					}
				}

				cls[index].tags = tempb;
				cls[index].pics = tempc;
			}
			
			// maybe something wrong
			private function assignAllClusters():void
			{
				var len:int = clusters.length - curPosition;
				//ncReal = len <= ncAll ? len : ncAll;
				ncReal = len <= ncMost ? len : ncMost;

				for (var i:int=0; i<clusters.length; i++)
				{
					assignCluster(i);
				}
				
				clsWhole.clearCluster();
			}
			
			private function layoutAllClusters():void
			{
				// play effect
				parShowAll.end();
				parShowAll.play();
			}
			
			private function showPrevClusPage():void
			{
				if (curPosition <= 0)
				{
					navPrevClus.visible = false;
					return;
				}
				
				cls[curPosition-1].visible = true;

				movLeft.end();
				movRight.end();
				
				curPosition--;
				//movRight.targets = cls;
				movRight.play();
				
				if (!navNextClus.visible)
				{
					navNextClus.visible = true;
				}
				
				if (curPosition <= 0)
				{
					navPrevClus.visible = false;
				}
			}
			
			private function showNextClusPage():void
			{
				if (clusters.length - curPosition <= ncMost)
				{
					navNextClus.visible = false;
					return;
				}
				
				cls[curPosition+ncMost].visible = true;

				movLeft.end();
				movRight.end();
				
				curPosition++;
				//movLeft.targets = cls;
				movLeft.play();
				
				if (clusters.length - curPosition <= ncMost)
				{
					navNextClus.visible = false;
				}
				
				if (!navPrevClus.visible)
				{
					navPrevClus.visible = true;
				}
				
				
			}
			
			private function showPrevPicPage():void
			{
				if (picPage > 0)
				{
					if (rbtnColor.visible && rbtnColor.selected)
					{
						searchRO.getPicUrlForColorRank(null, --picPage, selectedPic);
						disableApplication();
					}
					else if (rbtnWavelet.visible && rbtnWavelet.selected)
					{
						searchRO.getPicUrlForWaveLetRank(null, --picPage, selectedPic);
						disableApplication();
					}
					else if (rbtnRandom.visible && rbtnRandom.selected)
					{
						searchRO.getPicUrlForTagsRandom(getTagNames(clusters[selectedClusterIndex].tagList), tagsSearched, --picPage);
						disableApplication();
					}
					else
					{
						searchRO.getPicUrlForTagsRandom(getTagNames(clusters[selectedClusterIndex].tagList), tagsSearched, --picPage);
						disableApplication();
					}
				}
			}
			
			private function showNextPicPage():void
			{
				if (rbtnColor.visible && rbtnColor.selected)
				{
					searchRO.getPicUrlForColorRank(null, ++picPage, selectedPic);
					disableApplication();
				}
				else if (rbtnWavelet.visible && rbtnWavelet.selected)
				{
					searchRO.getPicUrlForWaveLetRank(null, ++picPage, selectedPic);
					disableApplication();
				}
				else if (rbtnRandom.visible && rbtnRandom.selected)
				{
					searchRO.getPicUrlForTagsRandom(getTagNames(clusters[selectedClusterIndex].tagList), tagsSearched, ++picPage);
					disableApplication();
				}
				else
				{
					searchRO.getPicUrlForTagsRandom(getTagNames(clusters[selectedClusterIndex].tagList), tagsSearched, ++picPage);
					disableApplication();
				}
			}	
			
			// get tags of one cluster
			private function getTagNames(ar:ArrayCollection):ArrayCollection
			{
				var re:ArrayCollection = new ArrayCollection();
				for (var i:int=0; i<ar.length; i++)
				{
					re.addItem(ar[i].tagName);
				}
				return re;
			}
			
			// get all tags of all clusters
			private function getAllTagNames():ArrayCollection
			{
				var re:ArrayCollection = new ArrayCollection();

				if (clusters != null)
				{
					for (var i:int=0; i<clusters.length; ++i)
					{
						var ar:ArrayCollection = clusters[i].tagList;
						for (var j:int=0; j<ar.length && j<TAGS_PER_CLUSTERS; ++j)
						{
							re.addItem(ar[j].tagName);
						}
					}
				}
				return re;
			}
			
			private function onSearchClick():void
			{
				var words:String = inputTag.text;
				if (words.length == 0)
				{
					return;
				}
				var ts:Array = words.split(/\s+/);
				if (ts.length == 0)
				{
					return;
				}
				fetchClusters(ts, 6);
				inputTag.text = "";
			}
			
			private function onRestartClick():void
			{
				gameStart();
			}
			
			
			private function radioChange(event:ItemClickEvent):void
			{
				picPage=0; 
				
				var label:String = event.label;
				if (label == "color")
				{
					imgSelected.blendMode=BlendMode.NORMAL;
					searchRO.getPicUrlForColorRank(null, picPage, selectedPic);
					disableApplication();
				}
				else if (label == "wavelet")
				{
					imgSelected.blendMode=BlendMode.NORMAL;
					searchRO.getPicUrlForWaveLetRank(null, picPage, selectedPic);
					disableApplication();
				}
				else
				{
					imgSelected.blendMode=BlendMode.OVERLAY;
					searchRO.getPicUrlForTagsRandom(getTagNames(clusters[selectedClusterIndex].tagList), tagsSearched, picPage);
					disableApplication();
				}
				imgSelected.visible = false;
				imgSelected.visible = true;
			}
			
			private function onTagClick(tag:String, index:int):void
			{
				var tags:Array = [tag];
				fetchClusters(tags, index);
			}
			
			private function onClusterClick(index:int):void
			{
				fetchPicsByCluster(index);
			}
			
			private function onCenterTagClick(tag:String, index:int):void
            {
            	if (isOnly)
            	{
            		var tags:Array = [tag];
            		fetchClusters(tags, index);
            	}
            	else
				{
	            	// show alert, user global variable tempTag to pass data.
					tempTag = tag;
					Alert.show("Delete the tag \"" + tag + "\"?", "Delete Confirm", Alert.YES | Alert.NO, this, alertClickHandler);
				}
            }
            
			// cluster click handler
			private function clusterClickHandler(event:ClusterClickEvent):void
			{
				switch (event.detailTarget)
				{
				case ClusterClickEvent.MORE_TARGET:
					// do nothing now.
					break;
				case ClusterClickEvent.TAG_TARGET:
					onTagClick(String(event.data), event.index);
					break;
				case ClusterClickEvent.VACANCY_TARGET:
				case ClusterClickEvent.PIC_TARGET:
					onClusterClick(event.index);
					break;
				}
			}
			
			// center cluster click handler
			private function centerClusterClickHandler(event:ClusterClickEvent):void
			{
				switch (event.detailTarget)
				{
				case ClusterClickEvent.TAG_TARGET:
					onCenterTagClick(String(event.data), event.index);
					break;
				}
			}
			
			// left(whole) cluster click handler
			private function leftClusterClickHandler(event:ClusterClickEvent):void
			{
				switch (event.detailTarget)
				{
				case ClusterClickEvent.TAG_TARGET:
					onTagClick(String(event.data), selectedClusterIndex);
					break;
				}
			}
			
			private function getPivotNumPicHandler(event:ResultEvent):void
			{
				picNum = int(event.result);
			}
		]]>
	</mx:Script>
	
	<mx:RemoteObject id="searchRO" destination="dataQuery_SearchService"
		fault="faultHandler(event)" showBusyCursor="true"/>

	<mx:VBox width="100%" height="100%" styleName="colorPanel">
		<!-- search input area -->
		<mx:HBox width="100%" height="234">
			<!-- width=236 -->
			<mx:VBox id="canSelected" width="0" height="100%" horizontalAlign="center" visible="false">
				<mx:Image id="imgLogo" width="100%" height="50" 
					source="@Embed('assets/logo.gif')" maintainAspectRatio="false"/>
				<mx:Canvas width="100%" height="100%" borderStyle="solid"
					dragEnter="doDragEnter(event);"
					dragDrop="doDragDrop(event);">
					<mx:Image id="imgSelected" source="assets/mondorana.jpg" width="100%" height="100%"
						verticalAlign="middle" horizontalAlign="center"
						rollOverEffect="{glowImage}" 
	            		rollOutEffect="{unglowImage}"
						completeEffect="Fade"/>
				</mx:Canvas>
				<mx:HBox width="100%" height="21" horizontalAlign="center" visible="false">
					<mx:RadioButtonGroup id="feature" itemClick="radioChange(event)"/>
					<mx:RadioButton label="color" groupName="feature" selected="false" enabled="false"
						id="rbtnColor"/>
					<mx:RadioButton label="wavelet" groupName="feature" selected="false" enabled="false"
						id="rbtnWavelet"/>
					<mx:RadioButton label="clear" groupName="feature" selected="false" enabled="false"
						id="rbtnRandom"/>
				</mx:HBox>
			</mx:VBox>
			<!--<mx:Spacer width="10" visible="false"/>-->
			<!-- input text & tag relation graph-->
			<mx:VBox width="1096" height="100%">
				<!--<mx:Spacer height="8"/> -->
				<mx:Canvas width="100%">
					<mx:Label text="Input Tags:" y="0" styleName="label" x="10" width="99"/>
					<mx:TextInput id="inputTag" width="379" x="98" toolTip="Input tags for search" fontSize="12"/>
					<mx:Label text="TopK:" x="513" styleName="label" y="0"/>
					<mx:TextInput id="txtTopKInSelectTag" text="{topKInSelectTag}" x="563" width="65" fontSize="12"/>
					<mx:Label text="Clusters:" x="649" styleName="label" y="0"/>
					<mx:TextInput id="txtMaxClusterNum" text="{maxClusterNum}" toolTip="maxClusterNum" x="713" width="52"  fontSize="12"/>
					<mx:Button label="Search" x="794" width="66" click="onSearchClick();" buttonMode="true" useHandCursor="true" styleName="button"/>
					<mx:Button label="Restart" x="878" width="67" click="onRestartClick();" buttonMode="true" useHandCursor="true" styleName="button"/>
				</mx:Canvas>
				<mx:Canvas id="canCluster" width="100%" height="100%" styleName="relationCanvas"
					horizontalScrollPolicy="off" verticalScrollPolicy="off">
					<!-- pages -->
					<hisa:NavButton source="{ICON_LEFT}" 
						id="navPrevClus"
						toolTip="Previous Page"
						imgWidth="12" imgHeight="12"
						x="0" y="125"
					    click="showPrevClusPage()" />
					<hisa:NavButton source="{ICON_RIGHT}" 
						id="navNextClus"
						toolTip="Next Page"
						imgWidth="12" imgHeight="12"
						x="1063" y="125"
					    click="showNextClusPage()" />
					<!--clipContent="false"-->
					<mx:Repeater id="rpHrs" dataProvider="{HRS_SHAPE}">
						<mx:HRule id="hrs" rotation="{rpHrs.currentItem.r}" visible="false"/>
					</mx:Repeater>
					
					<mx:Repeater id="rpCls" dataProvider="{clusters}">
						<hisa:TagCluster id="cls" index="{rpCls.currentIndex}"
							clusterClick="clusterClickHandler(event)"
							styleName="clusterCanvas" visible="false" hasPics="true"
							maxTagsVisible="4"
							useHandCursor="true" buttonMode="true"
							x="{FIRST_CLUSTER.x+rpCls.currentIndex*CLUSTER_XGAP}"
							y="{FIRST_CLUSTER.y}" width="{CLUSTER_SIZE.w}"
							height="{CLUSTER_SIZE.h}"/>
					</mx:Repeater>
						
					<!--
					<hisa:Tag id="tagCenter" x="293.5" y="102" text="TagCenter" visible="false"/>
					-->
					<hisa:TagCluster id="clusCenter" index="{CENTER_CLUSTER_INDEX}"
						clusterClick="centerClusterClickHandler(event)" styleName="clusterCanvasCircle" />	
						
					<mx:Label id="lblPicNum" text="Total Pictures: {picNum}" x="790" y="10" width="146" styleName="label" color="#000080"/>
					<mx:Button icon="{ICON_UNDO}" x="31" y="10" width="49" height="49" paddingLeft="0" toolTip="Undo" buttonMode="true" useHandCursor="true" includeInLayout="true" visible="false"/>
					<mx:Button icon="{ICON_REDO}" x="95" y="10" width="49" height="49"  paddingLeft="0" toolTip="Redo" buttonMode="true" useHandCursor="true" visible="false"/>
		        </mx:Canvas>
			</mx:VBox>
		</mx:HBox>

		<!-- image view -->
		<mx:HBox width="100%" height="100%" verticalAlign="middle" borderStyle="solid">
			<hisa:TagCluster id="clsWhole" index="{WHOLE_CLUSTER_INDEX}"
					visible="true" hasPics="true"
					clusterClick="leftClusterClickHandler(event)"
					width="210" height="100%" styleName="clusterCanvasWhole" />
			<hisa:NavButton source="{ICON_LEFT}"
				id="navPrevPic"
				toolTip="Previous Page"
				imgWidth="12" imgHeight="12"
			    click="showPrevPicPage()" />

			<!-- image view -->
			<hisa:ImageView id="imgView" width="100%" height="100%"/>

			<hisa:NavButton source="{ICON_RIGHT}"
				id="navNextPic"
				toolTip="Next Page"
				imgWidth="12" imgHeight="12"
			    click="showNextPicPage()" />
		</mx:HBox>
	</mx:VBox>
	
	<mx:Glow id="glowImage" duration="500" 
        alphaFrom="1.0" alphaTo="0.3" 
        blurXFrom="0.0" blurXTo="20.0" 
        blurYFrom="0.0" blurYTo="20.0" 
        color="0xff8000"/>
    <mx:Glow id="unglowImage" duration="500" 
        alphaFrom="0.3" alphaTo="1.0" 
        blurXFrom="20.0" blurXTo="0.0" 
        blurYFrom="20.0" blurYTo="0.0" 
        color="0xffb000"/>

    <mx:Dissolve id="dissolveOut" duration="500" alphaFrom="1.0" alphaTo="0.0"/>
    <mx:Dissolve id="dissolveIn" duration="500" alphaFrom="0.0" alphaTo="1.0" target="{clusCenter}" />
    
</mx:Canvas>
