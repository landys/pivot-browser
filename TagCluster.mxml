<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
	horizontalScrollPolicy="off" verticalScrollPolicy="off"
	styleName="clusterCanvas" click="if (isActive) lessClick(); event.stopPropagation();"
	rollOver="appRollOver();">
	<mx:Script>
		<![CDATA[
			import mx.controls.LinkButton;
			import mx.collections.ArrayCollection;
			
			// datas in tagcluster
			[Bindable]
			public var tags:ArrayCollection;

			// ask searchview to do bigger
			public var bigger:Function;

			// ask searchview to do smaller
			public var smaller:Function;
			
			// tag click
			public var viewTag:Function;
			
			// use as the tagCluster id
			public var index:int;
			
			// whether do initTagCluster at creationComplete
			public var isDoInit:Boolean = true;
			
			// whether tags in tagcluster is active
			public var isActive:Boolean = true;

			private function tagClick(tag:String):void
			{
				//trace(index+":TagCluster.tagClick(tag:String="+tag+") begin");
				viewTag(tag, index);
			}
			
			private function appRollOver():void
			{
				if (index < 6)
				{
					useHandCursor=true;
					buttonMode=true;
				}
			}
			
			public function setStyleName(name:String):void
			{
				styleName = name;
			}
			
			public function hindAllTags():void
			{
				//trace(index+":TagCluster.hindAllTags() begin");
				for (var i:int=0; i<lbtns.length; i++)
				{
					lbtns[i].visible = false;
				}
				lbtnMore.visible = false;
			}
			
			public function doInitTagCluster(cw:int, ch:int, xo:int=0, yo:int=0):void
			{
				//trace(index+":TagCluster.doInitTagCluster(cw:int="+cw+", ch:int="+ch+") begin");
				if (lbtns == null || lbtns.length == 0)
				{
					return;	
				}
				
				cw -= xo * 2;
				ch -= yo * 2;
				lbtns[0].x = xo;
				lbtns[0].y = yo;
				lbtns[0].visible = true;
				lbtnMore.visible = false;
				
				// replace all linkbuttons
				var i:int = 0;
				for (i=1; i<lbtns.length; i++)
				{
					// check current row
					if (lbtns[i-1].x + lbtns[i-1].width + lbtns[i].width - cw > 0)
					{	// check new row
						if (lbtns[i-1].y + lbtns[i-1].height + lbtns[i].height - ch > 0)
						{	// no new row
							if (lbtns[i-1].x + lbtns[i-1].width + lbtnMore.width - cw > 0)
							{
								lbtnMore.x = lbtns[i-1].x + lbtns[i-1].width;
								lbtnMore.y = lbtns[i-1].y;
								i++;
							}
							else
							{
								lbtnMore.x = lbtns[i-1].x;
								lbtnMore.y = lbtns[i-1].y;
							}
							lbtns[i-1].visible = false;
							lbtnMore.visible = true;
							break;
						}
						else
						{	// new row
							lbtns[i].x = xo;
							lbtns[i].y = lbtns[i-1].y + lbtns[i-1].height;
						}
					}
					else
					{	// current row
						lbtns[i].x = lbtns[i-1].x + lbtns[i-1].width;
						lbtns[i].y = lbtns[i-1].y;
					}
					lbtns[i].visible = true;
				}
				for (; i<lbtns.length; i++)
				{
					lbtns[i].visible = false;
				}
				//trace(index+":TagCluster.doInitTagCluster(cw:int, ch:int) end");
			}
			
			public function initTagCluster(xo:int=0, yo:int=0):void
			{
				//trace(index+":TagCluster.initTagCluster() begin");
				doInitTagCluster(width, height, xo, yo);
			}
			
			// click more button
			private function moreClick():void
			{
				//trace(index+":TagCluster.moreClick() begin");
				bigger(index);
				
			}
			
			private function lessClick():void
			{
				//trace(index+":TagCluster.moreClick() begin");
				// show smaller and get pictures
				smaller(index);
			}
		]]>
	</mx:Script>
	<mx:Repeater id="rp" dataProvider="{tags}">
		<mx:LinkButton id="lbtns" height="20" maxWidth="72"
			styleName="tagLinkButton"
		    label="{rp.currentItem.label}" 
		    click="if (isActive) tagClick(event.currentTarget.label); event.stopPropagation();"/>
    </mx:Repeater>
    <mx:LinkButton id="lbtnMore" height="20" width="18"
		styleName="tagLinkButton"
	    label="..." visible="false"
	    click="if (isActive) moreClick(); event.stopPropagation();"/>
</mx:Canvas>
